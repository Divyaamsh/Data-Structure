#include <climits>

class Solution {
        int check(vector<vector<int>>& matrix,int i,int j,int sizeC,int sizeR,vector<vector<int>>& helper){
                 if(i == sizeC-1){
                    if(j > -1 && j < sizeR){
                       return matrix[i][j]; 
                    } 
                    return 999999;
                 }

                 if(i < 0 || j< 0 || i > sizeC-1 || j > sizeR-1){
                    return 999999; 
                 }

                 if(helper[i][j] != 0){
                    return helper[i][j]; 
                 }

                 int res1 = check(matrix,i+1,j-1,sizeC,sizeR,helper);
                 int res2 = check(matrix,i+1,j,sizeC,sizeR,helper);
                 int res3 = check(matrix,i+1,j+1,sizeC,sizeR,helper);

                 helper[i][j] = matrix[i][j] + min(res1,min(res2,res3));
                 return helper[i][j];

        }

public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
                  int sizeC = matrix.size();
                  int sizeR = matrix[0].size();
                  vector<vector<int>> helper(sizeC+1,vector<int>(sizeR+1,0));
                  
                  int ans = INT_MAX;
                  for(int i=0; i<sizeR; i++){
                      ans = min(ans,check(matrix,0,i,sizeC,sizeR,helper));
                      //cout << ans << " ";
                  }
                  
                  return ans;
    }
};

