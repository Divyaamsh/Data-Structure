class Solution{   
        void check(vector<int> &arr,int size,int sum, bool &res){
                  if(size == 0 || sum == 0){
                     if(sum == 0){
                        res = true; 
                     }
                     return;
                  }
                  
                  check(arr,size-1,sum,res);
                  if(arr[size-1] <= sum){
                     sum = sum - arr[size-1];
                     check(arr,size-1,sum,res); 
                  }
                  
        }
        
        
        bool check2(vector<int> &arr, int size, int sum){
                   vector<vector<int>> helper(size+1, vector<int> (sum+1,0));
              /*   for(int i=0; i<size+1; i++){
                      for(int j=0; j<sum+1; j++){
                         helper[i][j] = 0; 
                      } 
                   }*/
                   
                   for(int i=0; i<size+1; i++){
                       helper[i][0] = 1;
                   }
                   for(int i=0; i<sum+1; i++){
                      // helper[0][i] = 1;
                   }
                   
                   
                   for(int i=1; i<size+1; i++){
                       for(int j=1; j<sum+1; j++){
                           if(arr[i-1] <= j){
                              helper[i][j] = (helper[i-1][j-arr[i-1]] || helper[i-1][j]);
                           }
                           else{
                              helper[i][j] = helper[i-1][j];
                           }   
                       }
                   }
                   //cout << helper[size][sum] << endl;
                   
                   return helper[size][sum]; 
        }
        
    
public:
    bool isSubsetSum(vector<int>arr, int sum){
            bool res = false;
            int size = arr.size();
            check(arr,size,sum,res);
            //bool r = check2(arr,size,sum);
            
            return res;
            
    }
};
