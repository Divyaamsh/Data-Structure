#include <climits>

class Solution {
        int check(string &text1,string &text2,int i,int j,vector<vector<int>> &result){
                  if(i == -1 || j == -1){
                     return 0; 
                  }
                  if(result[i][j] != -1){
                     return result[i][j];  
                  }  

                  if(text1[i] == text2[j]){
                     int res = (1+check(text1,text2,i-1,j-1,result)); 
                     result[i][j] = res;
                     return res;
                  }
                  else{
                      int res1 = check(text1,text2,i-1,j,result);
                      int res2 = check(text1,text2,i,j-1,result);
                      int res =  max(res1,res2);
                      result[i][j] = res;
                      return res; 
                  }
                 
                  return 0;
        }

public:
    int longestCommonSubsequence(string text1, string text2) {
               int size1 = text1.size();
               int size2 = text2.size();
/*
               // Method1 (recursion+memoization)
               
               int res = INT_MAX;
               vector<vector<int>> result(size1+1,vector<int>(size2+1,0));

               for(int i=0 ;i<size1+1; i++){
                   for(int j=0 ;j<size2+1; j++){
                       result[i][j] = -1;
                   }    
               } 

               res = check(text1,text2,size1-1,size2-1,result);  
                 
               return res;
*/               

               // Method 2 (bottom up approach (dp))
               vector<vector<int>> helper(size1+1,vector<int>(size2+1,0));

             /*  for(int i=0; i<size1+1; i++){
                   helper[i][0] = 0;   
               }
               for(int i=0; i<size2+1; i++){
                   helper[0][i] = 0;
               }  */ 

              for(int i=1; i<size1+1; i++){
                  for(int j=1; j<size2+1; j++){
                      if(text1[i-1] == text2[j-1]){
                         helper[i][j] = 1 + helper[i-1][j-1];
                      }   
                      else{
                         helper[i][j] = max(helper[i-1][j],helper[i][j-1]);
                      }
                  } 
               }

               return helper[size1][size2];  

    }
};
